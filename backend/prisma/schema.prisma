// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x", "linux-musl", "linux-arm64-openssl-3.0.x", "darwin", "darwin-arm64", "windows", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SupportTicket {
  id                  String            @id @default(cuid())
  status              String
  requested           DateTime
  organization        String
  subject             String
  updated             DateTime          @updatedAt
  assignee            String?
  requester           String
  productArea         String            @map("product_area")
  reasonForContact    String            @map("reason_for_contact")
  severity            TicketSeverity
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  // Relations
  productAreaMapping  ProductAreaMapping[] @relation("TicketProductArea")
  thresholdConfig     ThresholdConfiguration[] @relation("TicketThreshold")

  @@index([organization, productArea])
  @@index([severity, status])
  @@index([requested])
  @@index([organization, status, severity])
  @@map("support_tickets")
}

model DynatraceUsage {
  id                  String   @id @default(cuid())
  capability          String
  annualBudgetCost    Decimal  @map("annual_budget_cost") @db.Decimal(12, 2)
  last30DaysCost      Decimal  @map("last_30_days_cost") @db.Decimal(12, 2)
  organization        String
  uploadDate          DateTime @map("upload_date")
  createdAt           DateTime @default(now()) @map("created_at")

  // Relations
  productAreaMapping  ProductAreaMapping[] @relation("UsageCapability")

  @@index([organization, capability])
  @@index([uploadDate])
  @@index([organization, uploadDate])
  @@map("dynatrace_usage")
}

model ProductAreaMapping {
  id                  String   @id @default(cuid())
  productArea         String   @map("product_area")
  dynatraceCapability String   @map("dynatrace_capability")
  organization        String
  isKeyModule         Boolean  @default(false) @map("is_key_module")
  createdAt           DateTime @default(now()) @map("created_at")

  // Relations
  supportTickets      SupportTicket[] @relation("TicketProductArea")
  dynatraceUsage      DynatraceUsage[] @relation("UsageCapability")
  thresholdConfig     ThresholdConfiguration[] @relation("MappingThreshold")
  technicalDebtAnalysis TechnicalDebtAnalysis[] @relation("DebtProductArea")

  @@unique([productArea, dynatraceCapability, organization])
  @@index([organization, productArea])
  @@index([dynatraceCapability])
  @@map("product_area_mapping")
}

model ThresholdConfiguration {
  id                  String         @id @default(cuid())
  organization        String
  productArea         String         @map("product_area")
  severityLevel       TicketSeverity @map("severity_level")
  ticketThreshold     Int            @map("ticket_threshold")
  usageDropThreshold  Decimal        @map("usage_drop_threshold") @db.Decimal(5, 2)
  createdAt           DateTime       @default(now()) @map("created_at")

  // Relations
  supportTickets      SupportTicket[] @relation("TicketThreshold")
  productAreaMapping  ProductAreaMapping[] @relation("MappingThreshold")

  @@unique([organization, productArea, severityLevel])
  @@index([organization, productArea])
  @@map("threshold_configuration")
}

model TechnicalDebtAnalysis {
  id                      String   @id @default(cuid())
  organization            String
  productArea             String   @map("product_area")
  analysisDate            DateTime @map("analysis_date")
  ticketCountBySeverity   Json     @map("ticket_count_by_severity")
  usageMetrics            Json     @map("usage_metrics")
  debtScore               Decimal  @map("debt_score") @db.Decimal(5, 2)
  recommendations         String?
  createdAt               DateTime @default(now()) @map("created_at")

  // Relations
  productAreaMapping      ProductAreaMapping[] @relation("DebtProductArea")

  @@index([organization, productArea])
  @@index([analysisDate])
  @@index([organization, analysisDate])
  @@index([debtScore])
  @@map("technical_debt_analysis")
}

model Customer {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  company      String
  healthScore  Int      @default(5)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  interactions CustomerInteraction[]

  @@map("customers")
}

model CustomerInteraction {
  id         String   @id @default(cuid())
  customerId String   @map("customer_id")
  type       String
  notes      String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_interactions")
}

enum TicketSeverity {
  CRITICAL
  SEVERE
  MODERATE
  LOW
}
