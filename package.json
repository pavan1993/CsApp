{
  "name": "customer-success-analytics",
  "version": "1.0.0",
  "description": "Customer Success Analytics Application",
  "scripts": {
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && npm run dev",
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && npm run build",
    "build:prod": "cd backend && npm run build:prod && cd ../frontend && npm run build:prod",
    "build": "npm run build:backend && npm run build:frontend",
    "prebuild": "npm run db:generate",
    "install:all": "npm install && cd frontend && npm install && cd ../backend && npm install",
    "setup:frontend": "cd frontend && npm install",
    "setup:backend": "cd backend && npm install && cp .env.example .env",
    "setup": "npm run install:all && npm run setup:backend",
    "setup:docker": "mkdir -p backend/prisma scripts logs backups ssl test-data frontend/public",
    "db:generate": "cd backend && npx prisma generate --schema=./prisma/schema.prisma",
    "db:migrate": "cd backend && npx prisma migrate dev",
    "db:migrate:prod": "cd backend && npx prisma migrate deploy",
    "db:studio": "cd backend && npx prisma studio",
    "db:seed": "cd backend && npm run db:seed",
    "db:seed:prod": "cd backend && npm run db:seed:prod",
    "db:reset": "cd backend && npx prisma migrate reset",
    "db:backup": "./scripts/backup.sh",
    "db:restore": "./scripts/restore.sh",
    "test": "cd backend && npm test",
    "test:frontend": "cd frontend && npm run test",
    "test:frontend:ui": "cd frontend && npm run test:ui",
    "test:frontend:coverage": "cd frontend && npm run test:coverage",
    "test:all": "npm run test && npm run test:frontend",
    "test:watch": "cd backend && npm run test:watch",
    "test:coverage": "cd backend && npm run test:coverage",
    "test:integration": "cd backend && npm run test:integration",
    "test:docker": "docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit",
    "test:load": "artillery run load-test.yml",
    "start": "cd backend && npm start",
    "start:prod": "cd backend && npm run start:prod",
    "docker:build": "docker-compose build --no-cache",
    "docker:dev": "docker-compose up --build",
    "docker:prod": "docker-compose -f docker-compose.prod.yml up --build -d",
    "docker:staging": "docker-compose -f docker-compose.staging.yml up --build -d",
    "docker:down": "docker-compose down",
    "docker:down:prod": "docker-compose -f docker-compose.prod.yml down",
    "docker:logs": "docker-compose logs -f",
    "docker:logs:prod": "docker-compose -f docker-compose.prod.yml logs -f",
    "docker:ps": "docker-compose ps",
    "docker:clean": "docker system prune -a",
    "health": "curl -f http://localhost:5000/api/health && curl -f http://localhost:3000/health",
    "health:prod": "curl -f https://yourdomain.com/api/health && curl -f https://yourdomain.com/health",
    "lint": "cd backend && npm run lint && cd ../frontend && npm run lint",
    "lint:fix": "cd backend && npm run lint:fix && cd ../frontend && npm run lint:fix",
    "security:audit": "cd backend && npm audit && cd ../frontend && npm audit",
    "security:fix": "cd backend && npm audit fix && cd ../frontend && npm audit fix",
    "clean": "rm -rf backend/dist frontend/dist backend/node_modules frontend/node_modules node_modules",
    "clean:docker": "docker-compose down -v && docker system prune -a",
    "postinstall": "npm run setup:docker"
  },
  "keywords": [
    "customer-success",
    "analytics",
    "react",
    "nodejs",
    "postgresql"
  ],
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "@types/jspdf": "^1.3.3",
    "@types/recharts": "^1.8.29",
    "concurrently": "^7.6.0"
  },
  "dependencies": {
    "jspdf": "^3.0.1",
    "jspdf-autotable": "^5.0.2",
    "recharts": "^2.15.3",
    "xlsx": "^0.18.5"
  }
}
