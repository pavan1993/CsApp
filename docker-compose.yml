services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: customer-success-db
    environment:
      POSTGRES_DB: customer_success_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - customer-success-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: customer-success-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/customer_success_db?schema=public
      PORT: 3001
      JWT_SECRET: dev-jwt-secret-change-in-production
      CORS_ORIGIN: http://localhost:3000
      PRISMA_CLI_BINARY_TARGETS: native
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/app/src
      - ./backend/prisma:/app/prisma
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - customer-success-network
    command: ["sh", "-c", "npx prisma generate && npm run dev"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: customer-success-frontend
    environment:
      VITE_API_URL: http://localhost:3001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - customer-success-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: customer-success-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - customer-success-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  backend_uploads:

networks:
  customer-success-network:
    driver: bridge
